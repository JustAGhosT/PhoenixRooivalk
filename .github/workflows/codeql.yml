name: "CodeQL Security Analysis"

on:
  push:
    branches: ["main"]
    paths:
      - "**/*.ts"
      - "**/*.tsx"
      - "**/*.js"
      - "**/*.jsx"
      - "**/*.rs"
      - ".github/workflows/codeql.yml"
  pull_request:
    branches: ["main"]
    paths:
      - "**/*.ts"
      - "**/*.tsx"
      - "**/*.js"
      - "**/*.jsx"
      - "**/*.rs"
      - ".github/workflows/codeql.yml"
  schedule:
    - cron: "30 2 * * 1" # Weekly on Monday at 2:30 AM UTC
  workflow_dispatch:

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read
      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: javascript-typescript
            build-mode: none
          - language: rust
            build-mode: none # Rust doesn't support autobuild mode

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check if CodeQL is enabled
        id: codeql-check
        continue-on-error: true
        run: |
          # Check if code scanning is enabled
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "::warning::GitHub token not available. Code scanning might not work properly."
            echo "enabled=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Try to verify if code scanning is enabled
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/analyses" || true)
            
          if [[ "$RESPONSE" == *"code scanning is not enabled"* ]]; then
            echo "::warning::Code scanning is not enabled for this repository."
            echo "::warning::Please enable it in repository Settings > Security > Code scanning."
            echo "enabled=false" >> $GITHUB_OUTPUT
          else
            echo "Code scanning appears to be enabled."
            echo "enabled=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust toolchain
        if: ${{ steps.codeql-check.outputs.enabled == 'true' && matrix.language == 'rust' }}
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Clean previous builds
        if: ${{ steps.codeql-check.outputs.enabled == 'true' && matrix.language == 'rust' }}
        run: |
          # Clean any previous build artifacts that might cause issues
          find . -name "target" -type d -exec rm -rf {} + 2>/dev/null || true

      - name: Setup Node.js and pnpm
        if: matrix.language == 'javascript-typescript'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Install pnpm
        if: matrix.language == 'javascript-typescript'
        run: |
          npm install -g pnpm@9
          echo "pnpm version: $(pnpm --version)"

      - name: Install dependencies
        if: matrix.language == 'javascript-typescript'
        run: pnpm install --frozen-lockfile

      - name: Initialize CodeQL
        if: steps.codeql-check.outputs.enabled == 'true'
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          config-file: .github/codeql-config.yml
          debug: true

      - name: Build Rust project for CodeQL
        if: ${{ steps.codeql-check.outputs.enabled == 'true' && matrix.language == 'rust' }}
        run: |
          # Set environment variables for better Rust compilation
          export RUST_BACKTRACE=1
          export CARGO_INCREMENTAL=0
          export CARGO_TARGET_DIR=/tmp/target

          # Build each Rust project with debug information
          echo "Building apps/keeper..."
          cd apps/keeper && cargo build --verbose

          echo "Building crates..."
          cd ../../crates
          for crate in */; do
            if [ -f "$crate/Cargo.toml" ]; then
              echo "Building $crate..."
              cd "$crate" && cargo build --verbose && cd ..
            fi
          done

      - name: Perform CodeQL Analysis
        if: steps.codeql-check.outputs.enabled == 'true'
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          upload: false
          output: codeql-results.sarif

      - name: Upload SARIF results (non-fatal)
        if: steps.codeql-check.outputs.enabled == 'true'
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: codeql-results.sarif
          checkout_path: ${{ github.workspace }}
          category: "/language:${{matrix.language}}"
